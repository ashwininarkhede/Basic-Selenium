<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="11" passed="10" failed="1" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2023-07-17T10:36:54 IST" name="Suite" finished-at="2023-07-17T10:36:54 IST" duration-ms="282">
    <groups>
    </groups>
    <test started-at="2023-07-17T10:36:54 IST" name="Test" finished-at="2023-07-17T10:36:54 IST" duration-ms="282">
      <class name="testNg.TestNgPracticeTest">
        <test-method signature="modifyUser()[pri:-1, instance:testNg.TestNgPracticeTest@7bab3f1a]" started-at="2023-07-17T10:36:54 IST" name="modifyUser" finished-at="2023-07-17T10:36:54 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- modifyUser -->
        <test-method signature="deleteUser()[pri:0, instance:testNg.TestNgPracticeTest@7bab3f1a]" started-at="2023-07-17T10:36:54 IST" name="deleteUser" finished-at="2023-07-17T10:36:54 IST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- deleteUser -->
        <test-method signature="createUser()[pri:1, instance:testNg.TestNgPracticeTest@7bab3f1a]" started-at="2023-07-17T10:36:54 IST" name="createUser" finished-at="2023-07-17T10:36:54 IST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
        <test-method signature="createUser()[pri:1, instance:testNg.TestNgPracticeTest@7bab3f1a]" started-at="2023-07-17T10:36:54 IST" name="createUser" finished-at="2023-07-17T10:36:54 IST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- createUser -->
      </class> <!-- testNg.TestNgPracticeTest -->
      <class name="testNg.DtaProvider">
        <test-method signature="data(java.lang.String,int)[pri:0, instance:testNg.DtaProvider@23c30a20]" started-at="2023-07-17T10:36:54 IST" name="data" data-provider="getData" finished-at="2023-07-17T10:36:54 IST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[iphone]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[30000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- data -->
        <test-method signature="data(java.lang.String,int)[pri:0, instance:testNg.DtaProvider@23c30a20]" started-at="2023-07-17T10:36:54 IST" name="data" data-provider="getData" finished-at="2023-07-17T10:36:54 IST" duration-ms="21" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[sumsung]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[20000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- data -->
        <test-method signature="data(java.lang.String,int)[pri:0, instance:testNg.DtaProvider@23c30a20]" started-at="2023-07-17T10:36:54 IST" name="data" data-provider="getData" finished-at="2023-07-17T10:36:54 IST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[oopo]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[10000]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- data -->
      </class> <!-- testNg.DtaProvider -->
      <class name="Basic.SoftAsseart">
        <test-method signature="m1()[pri:0, instance:Basic.SoftAsseart@12aba8be]" started-at="2023-07-17T10:36:54 IST" name="m1" finished-at="2023-07-17T10:36:54 IST" duration-ms="29" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m1 -->
      </class> <!-- Basic.SoftAsseart -->
      <class name="testNg.TestNgPractice">
        <test-method signature="siple()[pri:0, instance:testNg.TestNgPractice@437da279]" started-at="2023-07-17T10:36:54 IST" name="siple" finished-at="2023-07-17T10:36:54 IST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- siple -->
      </class> <!-- testNg.TestNgPractice -->
      <class name="Basic.HardAssert">
        <test-method signature="m1()[pri:0, instance:Basic.HardAssert@1de76cc7]" started-at="2023-07-17T10:36:54 IST" name="m1" finished-at="2023-07-17T10:36:54 IST" duration-ms="16" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m1 -->
        <test-method signature="m2()[pri:0, instance:Basic.HardAssert@1de76cc7]" started-at="2023-07-17T10:36:54 IST" name="m2" finished-at="2023-07-17T10:36:54 IST" duration-ms="3" status="FAIL">
          <exception class="java.lang.AssertionError">
            <message>
              <![CDATA[expected [Megha] but found [Ashwini]]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.AssertionError: expected [Megha] but found [Ashwini]
at org.testng.Assert.fail(Assert.java:99)
at org.testng.Assert.failNotEquals(Assert.java:1037)
at org.testng.Assert.assertEqualsImpl(Assert.java:140)
at org.testng.Assert.assertEquals(Assert.java:122)
at org.testng.Assert.assertEquals(Assert.java:629)
at org.testng.Assert.assertEquals(Assert.java:639)
at Basic.HardAssert.m2(HardAssert.java:21)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:77)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:568)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:133)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:598)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:824)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1511)
at org.testng.TestRunner.privateRun(TestRunner.java:794)
at org.testng.TestRunner.run(TestRunner.java:596)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:377)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:371)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:332)
at org.testng.SuiteRunner.run(SuiteRunner.java:276)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1212)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1134)
at org.testng.TestNG.runSuites(TestNG.java:1063)
at org.testng.TestNG.run(TestNG.java:1031)
at org.testng.remote.AbstractRemoteTestNG.run(AbstractRemoteTestNG.java:115)
at org.testng.remote.RemoteTestNG.initAndRun(RemoteTestNG.java:251)
at org.testng.remote.RemoteTestNG.main(RemoteTestNG.java:77)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.AssertionError -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- m2 -->
      </class> <!-- Basic.HardAssert -->
    </test> <!-- Test -->
  </suite> <!-- Suite -->
</testng-results>
